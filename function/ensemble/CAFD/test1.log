tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 3.926 (3.926)	Loss 16.1094 (16.1094)	Prec@1 0.500 (0.500)
Train-Epoch: [0][10/16]	Time 0.466 (0.778)	Loss 1.5674 (11.8690)	Prec@1 0.984 (0.827)
| Elapsed time : 0:00:11
prec=0.983
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.457 (0.457)	Loss 16.1740 (16.1740)	Prec@1 0.539 (0.539)
Train-Epoch: [0][10/16]	Time 0.475 (0.461)	Loss 1.5710 (11.9512)	Prec@1 0.992 (0.808)
| Elapsed time : 0:00:08
prec=0.982
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.463 (0.463)	Loss 16.0898 (16.0898)	Prec@1 0.508 (0.508)
Train-Epoch: [0][10/16]	Time 0.446 (0.457)	Loss 2.2154 (13.2449)	Prec@1 0.992 (0.794)
| Elapsed time : 0:00:08
prec=0.9835000004768372
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.432 (0.432)	Loss 16.0827 (16.0827)	Prec@1 0.555 (0.555)
Train-Epoch: [0][10/16]	Time 0.462 (0.460)	Loss 1.4265 (11.5909)	Prec@1 0.992 (0.827)
| Elapsed time : 0:00:08
prec=0.9785
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.463 (0.463)	Loss 16.1225 (16.1225)	Prec@1 0.500 (0.500)
Train-Epoch: [0][10/16]	Time 0.466 (0.464)	Loss 2.9890 (12.3283)	Prec@1 0.953 (0.793)
| Elapsed time : 0:00:08
prec=0.983
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.454 (0.454)	Loss 16.0276 (16.0276)	Prec@1 0.523 (0.523)
Train-Epoch: [0][10/16]	Time 0.468 (0.463)	Loss 1.4979 (10.6590)	Prec@1 0.992 (0.827)
| Elapsed time : 0:00:08
prec=0.98
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.456 (0.456)	Loss 16.1298 (16.1298)	Prec@1 0.492 (0.492)
Train-Epoch: [0][10/16]	Time 0.455 (0.462)	Loss 2.3780 (12.7748)	Prec@1 0.992 (0.798)
| Elapsed time : 0:00:08
prec=0.982
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.460 (0.460)	Loss 25.7294 (25.7294)	Prec@1 0.133 (0.133)
Train-Epoch: [0][10/16]	Time 0.450 (0.458)	Loss 2.7867 (22.6195)	Prec@1 0.977 (0.685)
| Elapsed time : 0:00:08
Train-Epoch: [1][0/16]	Time 0.482 (0.482)	Loss 0.9634 (0.9634)	Prec@1 0.977 (0.977)
Train-Epoch: [1][10/16]	Time 0.466 (0.461)	Loss 0.7463 (5.9998)	Prec@1 0.969 (0.896)
| Elapsed time : 0:00:16
Train-Epoch: [2][0/16]	Time 0.455 (0.455)	Loss 0.6456 (0.6456)	Prec@1 0.984 (0.984)
Train-Epoch: [2][10/16]	Time 0.463 (0.464)	Loss 0.3193 (2.1972)	Prec@1 0.984 (0.960)
| Elapsed time : 0:00:24
prec=0.991
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.448 (0.448)	Loss 58.1982 (58.1982)	Prec@1 0.203 (0.203)
Train-Epoch: [0][10/16]	Time 0.460 (0.469)	Loss 1.0805 (13.2116)	Prec@1 1.000 (0.761)
| Elapsed time : 0:00:08
prec=0.9895000014305114
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.734 (0.734)	Loss 17.6864 (17.6864)	Prec@1 0.430 (0.430)
Train-Epoch: [0][10/16]	Time 0.730 (0.736)	Loss 4.6474 (14.3348)	Prec@1 0.984 (0.734)
| Elapsed time : 0:00:12
prec=0.9685000004768372
tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        ...,


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]],


        [[[0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          ...,
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.],
          [0., 0., 0.,  ..., 0., 0., 0.]]]], device='cuda:0')
>>> SENDING MODEL TO GPU...
Train-Epoch: [0][0/16]	Time 0.706 (0.706)	Loss 27.9538 (27.9538)	Prec@1 0.297 (0.297)
Train-Epoch: [0][10/16]	Time 0.759 (0.744)	Loss 2.7915 (15.9885)	Prec@1 0.977 (0.716)
| Elapsed time : 0:00:13
prec=0.9870000014305115
{'fgsm': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.983}, 'bim': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.982}, 'rfgsm': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.9835000004768372}, 'cw': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.9785}, 'pgd': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.983}, 'tpgd': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.98}, 'mifgsm': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.982}, 'autopgd': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.991}, 'square': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.9895000014305114}, 'deepfool': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.9685000004768372}, 'difgsm': {'denoiser': DataParallel(
  (module): Denoiser(
    (forward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (4): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (backward_blocks): ModuleList(
      (0): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (1): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (2): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(384, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (2): BasicBlock(
            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
      (3): NetworkBlock(
        (layer): Sequential(
          (0): BasicBlock(
            (conv): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (batchNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.9, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (upsampler): ModuleList(
      (0): Upsample(size=(4, 4), mode=bilinear)
      (1): Upsample(size=(7, 7), mode=bilinear)
      (2): Upsample(size=(14, 14), mode=bilinear)
      (3): Upsample(size=(28, 28), mode=bilinear)
    )
    (conv_1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
  )
), 'prec': 0.9870000014305115}}
